{"version":3,"sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","components/Exchange/index.tsx","components/Exchange/Exchange.tsx"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","Exchange","dispatch","useDispatch","userCurrencyCode","useSelector","state","exchangeRates","useState","error","setError","useEffect","a","getExchangeRates","allRates","result","exchangeRatesFromServer","Object","entries","conversion_rates","type","payload","className","onChange","event","target","value","filter","rate","map","currencyList","values","codes","sort","currency","getSelectOptions"],"mappings":"sIAGIA,E,+BACAC,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAKH,KAGHA,EAAoC,qBAAXI,QAA0BA,OAAOJ,iBAAmBI,OAAOJ,gBAAgBK,KAAKD,SAA+B,qBAAbE,UAAgE,oBAA7BA,SAASN,iBAAkCM,SAASN,gBAAgBK,KAAKC,WAGrO,MAAM,IAAIC,MAAM,4GAIpB,OAAOP,EAAgBC,GCjBV,4HCQf,ICFeO,MAJf,SAAkBC,GAChB,MAAuB,kBAATA,GAAqBC,EAAMC,KAAKF,IDG5CG,EAAY,GAEPC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,OAAO,IAoBlCC,MAjBf,SAAmBC,GACjB,IAAIC,EAASC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,EAG7EX,GAAQG,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,MAAMI,cAMzf,IAAKf,EAASC,GACZ,MAAMe,UAAU,+BAGlB,OAAOf,GEHMgB,MApBf,SAAYC,EAASC,EAAKR,GAExB,IAAIS,GADJF,EAAUA,GAAW,IACFG,SAAWH,EAAQvB,KAAOA,KAK7C,GAHAyB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPR,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBc,EAAIR,EAASN,GAAKe,EAAKf,GAGzB,OAAOc,EAGT,OAAOV,EAAUW,I,qCClBJE,UCIS,WACtB,IAAMC,EAAWC,cACXC,EAAmBC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,oBAC3DG,EAAgBF,aAAY,SAACC,GAAD,OAAsBA,EAAMC,iBAC9D,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,sEACwBC,YAAiBT,GADzC,OAGyB,WAFlBU,EADP,QAGcC,QACLC,EAA0BC,OAAOC,QAAQJ,EAASK,kBAExDjB,EAAS,CAAEkB,KAAM,qBAAsBC,QAASL,KAEhDN,EAAS,oDARZ,0CAAD,KAWC,CAACN,IA4BJ,OACE,sBAAKkB,UAAU,6CAAf,UACE,2DACA,yBACEC,SA9BkB,SAACC,GACvBtB,EAAS,CAAEkB,KAAM,oBAAqBC,QAASG,EAAMC,OAAOC,SA8BxDJ,UAAU,cAFZ,UAIGlB,EACG,wBAAQsB,MAAOtB,EAAf,SAAkCA,IAClC,wBAAQsB,MAAM,MAAd,iBACJ,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBAlCmB,WACvB,GAAInB,EAKF,OAJqBA,EAAcoB,QAAO,SAAAC,GAAI,MAChC,QAAZA,EAAK,IAA4B,QAAZA,EAAK,IAA4B,QAAZA,EAAK,MAG5BC,KAAI,SAAAD,GAAI,OAC3B,wBAAmBF,MAAOE,EAAK,GAA/B,SAAoCA,EAAK,IAA5BhC,QAIjB,IAAMkC,EAAeb,OAAOc,OAAOC,KAAOL,QAAO,SAAAC,GAAI,MACvC,QAAZA,EAAK,IAA4B,QAAZA,EAAK,IAA4B,QAAZA,EAAK,MAKjD,OAFAE,EAAaG,OAELH,EAAaD,KAAI,SAAAK,GAAQ,OAC/B,wBAAuBR,MAAOQ,EAA9B,SAAyCA,GAA5BA,MAiBVC,MAEF1B,GAAS,+BAAOA,IACjB,6BACGF,EAAcsB,KAAI,SAAAD,GAAI,OACrB,yCACQA,EAAK,GADb,cACqBA,EAAK,GAD1B,YACgCxB,IADvBR","file":"static/js/3.aab88998.chunk.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { Exchange } from './Exchange';\n\nexport default Exchange;\n","import { v4 } from 'uuid';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getExchangeRates } from '../../Api/Rates';\nimport { codes } from '../../Api/CurrencyCodes';\n\nexport const Exchange = () => {\n  const dispatch = useDispatch();\n  const userCurrencyCode = useSelector((state: RootState) => state.userCurrencyCode);\n  const exchangeRates = useSelector((state: RootState) => state.exchangeRates);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      const allRates = await getExchangeRates(userCurrencyCode);\n\n      if (allRates.result !== 'error') {\n        const exchangeRatesFromServer = Object.entries(allRates.conversion_rates);\n\n        dispatch({ type: 'SET_EXCHANGE_RATES', payload: exchangeRatesFromServer });\n      } else {\n        setError('We got some error while loading data from server');\n      }\n    })();\n  }, [userCurrencyCode]);\n\n  const setUserCurrency = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch({ type: 'SET_USER_CURRENCY', payload: event.target.value });\n  };\n\n  const getSelectOptions = () => {\n    if (exchangeRates) {\n      const currencyList = exchangeRates.filter(rate => (\n        rate[0] !== 'USD' && rate[0] !== 'EUR' && rate[0] !== 'UAH'\n      ));\n\n      return (currencyList.map(rate => (\n        <option key={v4()} value={rate[0]}>{rate[0]}</option>\n      )));\n    }\n\n    const currencyList = Object.values(codes).filter(rate => (\n      rate[0] !== 'USD' && rate[0] !== 'EUR' && rate[0] !== 'UAH'\n    ));\n\n    currencyList.sort();\n\n    return (currencyList.map(currency => (\n      <option key={currency} value={currency}>{currency}</option>\n    )));\n  };\n\n  return (\n    <div className=\"flex-wrap justify-content-center py-3 mb-4\">\n      <span>Please choose an option</span>\n      <select\n        onChange={setUserCurrency}\n        className=\"form-select\"\n      >\n        {userCurrencyCode\n          ? <option value={userCurrencyCode}>{userCurrencyCode}</option>\n          : <option value=\"USD\">USD</option>}\n        <option value=\"USD\">USD</option>\n        <option value=\"UAH\">UAH</option>\n        <option value=\"EUR\">EUR</option>\n        {getSelectOptions()}\n      </select>\n      {error && <span>{error}</span>}\n      <ul>\n        {exchangeRates.map(rate => (\n          <li key={v4()}>\n            {`1 ${rate[0]} = ${rate[1]} ${userCurrencyCode}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n"],"sourceRoot":""}