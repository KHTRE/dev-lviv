{"version":3,"sources":["components/Exchange/index.tsx","components/Exchange/Exchange.tsx"],"names":["Exchange","dispatch","useDispatch","userCurrencyCode","useSelector","state","exchangeRates","useState","error","setError","useEffect","a","getExchangeRates","allRates","result","exchangeRatesFromServer","Object","entries","conversion_rates","type","payload","className","onChange","event","target","value","filter","rate","map","currencyList","values","codes","sort","currency","getSelectOptions"],"mappings":"0MAEeA,UCGS,WACtB,IAAMC,EAAWC,cACXC,EAAmBC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,oBAC3DG,EAAgBF,aAAY,SAACC,GAAD,OAAsBA,EAAMC,iBAC9D,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,sEACwBC,YAAiBT,GADzC,OAGyB,WAFlBU,EADP,QAGcC,QACLC,EAA0BC,OAAOC,QAAQJ,EAASK,kBAExDjB,EAAS,CAAEkB,KAAM,qBAAsBC,QAASL,KAEhDN,EAAS,oDARZ,0CAAD,KAWC,CAACN,IA4BJ,OACE,sBAAKkB,UAAU,6CAAf,UACE,2DACA,yBACEC,SA9BkB,SAACC,GACvBtB,EAAS,CAAEkB,KAAM,oBAAqBC,QAASG,EAAMC,OAAOC,SA8BxDJ,UAAU,cAFZ,UAIGlB,EACG,wBAAQsB,MAAOtB,EAAf,SAAkCA,IAClC,wBAAQsB,MAAM,MAAd,iBACJ,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBAlCmB,WACvB,GAAInB,EAKF,OAJqBA,EAAcoB,QAAO,SAAAC,GAAI,MAChC,QAAZA,EAAK,IAA4B,QAAZA,EAAK,IAA4B,QAAZA,EAAK,MAG5BC,KAAI,SAAAD,GAAI,OAC3B,wBAAsBF,MAAOE,EAAK,GAAlC,SAAuCA,EAAK,IAA/BA,EAAK,OAItB,IAAME,EAAeb,OAAOc,OAAOC,KAAOL,QAAO,SAAAC,GAAI,MACvC,QAAZA,EAAK,IAA4B,QAAZA,EAAK,IAA4B,QAAZA,EAAK,MAKjD,OAFAE,EAAaG,OAELH,EAAaD,KAAI,SAAAK,GAAQ,OAC/B,wBAAuBR,MAAOQ,EAA9B,SAAyCA,GAA5BA,MAiBVC,MAEF1B,GAAS,+BAAOA,IACjB,6BACGF,EAAcsB,KAAI,SAAAD,GAAI,OACrB,+BACGA,EAAK,GADR,KAGGA,EAAK,KAHCA,EAAK","file":"static/js/3.50eed2a1.chunk.js","sourcesContent":["import { Exchange } from './Exchange';\n\nexport default Exchange;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getExchangeRates } from '../../Api/Rates';\nimport { codes } from '../../Api/CurrencyCodes';\n\nexport const Exchange = () => {\n  const dispatch = useDispatch();\n  const userCurrencyCode = useSelector((state: RootState) => state.userCurrencyCode);\n  const exchangeRates = useSelector((state: RootState) => state.exchangeRates);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    (async () => {\n      const allRates = await getExchangeRates(userCurrencyCode);\n\n      if (allRates.result !== 'error') {\n        const exchangeRatesFromServer = Object.entries(allRates.conversion_rates);\n\n        dispatch({ type: 'SET_EXCHANGE_RATES', payload: exchangeRatesFromServer });\n      } else {\n        setError('We got some error while loading data from server');\n      }\n    })();\n  }, [userCurrencyCode]);\n\n  const setUserCurrency = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch({ type: 'SET_USER_CURRENCY', payload: event.target.value });\n  };\n\n  const getSelectOptions = () => {\n    if (exchangeRates) {\n      const currencyList = exchangeRates.filter(rate => (\n        rate[0] !== 'USD' && rate[0] !== 'EUR' && rate[0] !== 'UAH'\n      ));\n\n      return (currencyList.map(rate => (\n        <option key={rate[0]} value={rate[0]}>{rate[0]}</option>\n      )));\n    }\n\n    const currencyList = Object.values(codes).filter(rate => (\n      rate[0] !== 'USD' && rate[0] !== 'EUR' && rate[0] !== 'UAH'\n    ));\n\n    currencyList.sort();\n\n    return (currencyList.map(currency => (\n      <option key={currency} value={currency}>{currency}</option>\n    )));\n  };\n\n  return (\n    <div className=\"flex-wrap justify-content-center py-3 mb-4\">\n      <span>Please choose an option</span>\n      <select\n        onChange={setUserCurrency}\n        className=\"form-select\"\n      >\n        {userCurrencyCode\n          ? <option value={userCurrencyCode}>{userCurrencyCode}</option>\n          : <option value=\"USD\">USD</option>}\n        <option value=\"USD\">USD</option>\n        <option value=\"UAH\">UAH</option>\n        <option value=\"EUR\">EUR</option>\n        {getSelectOptions()}\n      </select>\n      {error && <span>{error}</span>}\n      <ul>\n        {exchangeRates.map(rate => (\n          <li key={rate[0]}>\n            {rate[0]}\n            --\n            {rate[1]}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n"],"sourceRoot":""}